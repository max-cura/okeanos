GPIO

- two banks of GPIO
- three dedicated interrupt lines; triggered by setting of bits in event detect status register; one interrupt for each bank, and a shared line
- alternate function table also has pull state which is applied after power down

offset +20 0000h

REGISTERS
00	GPFSEL0		RW
04	GPFSEL1		RW
08	GPFSEL2		RW
0C	GPFSEL3		RW
10	GPFSEL4		RW
14	GPFSEL5		RW
18	---
1C	GPSET0		W
20	GPSET1		W
24	---
28	GPCLR0		W
2C	GPCLR1		W

- note that both GPSET and GPCLR both work on 'write 1' logic

30	---
34	GPLEV0		R	level
38	GPLEV1		R
3C	---
40	GPEDS0		RW	event detect status
44	GPEDS1		RW
48	---
4C	GPREN0		RW	rising edge detect enable
50	GPREN1		RW
54	---
58	GPFEN0		RW	falling edge detect enable
5C	GPFEN1		RW
60	---
64	GPHEN0		RW	pin high detect enable
68	GPHEN1		RW
6C	---
70	GPLEN0		RW	pin low detect enable
74	GPLEN1		RW
78	---
7C	GPAREN0		RW	pin async. rising edge detect
80	GPAREN1		RW
84	---
88	GPAFEN0		RW	pin async. falling edge detect
8C	GPAFEN1		RW
90	---
94	GPPUD		RW	pull-up/down enable
98	GPPUDCLK0	RW	pull-up/down enable clock
9C	GPPUDCLK1	RW
A0	---
B0	Test		RW(4)

GPFSELn
- FSEL{n} determines functionality of the {n}th pin.
- unused function lines are tied to ground and will output a "0" if selected.
- all pins reset to normal GPIO input operation.
BITS (GPFSEL0)
	31:30		R	0	Reserved
	29:27	FSEL9	RW	0
		000 pin 9 is input
		001 pin 9 is output
		100 AF0
		101 AF1
		110 AF2
		111 AF3
		011 AF4
		010 AF5
	26:24	FSEL8
	23:21	FSEL7
	20:18	FSEL6
	17:15	FSEL5
	14:12	FSEL4
	11:9	FSEL3
	8:6	FSEL2
	5:3	FSEL1
	2:0	FSEL0
ASSIGNMENT
	GPFSEL0 - pins 0:9
	GPFSEL1 - pins 10:19
	GPFSEL2 - pins 20:29
	GPFSEL3 - pins 30:39
	GPFSEL4 - pins 40:49
	GPFSEL5	- pins 50:53 (bits 11:0)

GPSETn & GPCLRn
- if configured as input, set/clear are ignored, BUT the last set/clear operation will take effect if the pin is subsequently set as an output

GPLEVn
- 1 HIGH, 0 LOW
- readonly

GPEDSn
- record level and edge events on GPIO pins.
- bits are set when: edge is detected that matches program in REN/FEN, or level is detected that matches program in HEN/LEN
- bits are cleared by writing "1" to the relevant bit

GPRENn / GPFENn
- set to enable; if enabled, will set bits in GPEDSn
- if bit is set in both REN and FEN, then ANY transition will set the bit.
- input signals are sampled with system clock
- REN looks for 011 pattern, FEN looks for 100 pattern

GPHENn / GPLENn
- if pin is still HIGH/LOW when trying to clear the bit in GPEDSn, it will remain set

GPARENn / GPAFENn
- not sampled by system clock, so short duration edges can be sampled

GPPUD
	31:2	Unused	R	0
	1:0	PUD	RW	0
		00 = off (disable pull-up/down)
		01 = enable pull down ctrl
		10 = enable pull up ctrl
		11 = reserved

Protocol:
1. Write GPPUD with control signal
2. Wait 150 cycles
>	150us (source: Linux kernel)
3. Write to GPPUDCLK0/1 to clock the control signal into the GPIO pads. Only pads that receive a clock are modified; all other retain prior state.
4. Wait 150 cycles
=== I presume 150us
5. write to GPPUD to remove control signal
=== It may be necessary to wait 150us
6. Write to GPPUDCLK0/1 to remove the clock

GPPUDCLKn
- 0 = "no effect"
=== annotations indicate that writing 0 with PPUD in 00 may entirely disable?
- 1 = assert clock

ALTFN (refer to table on page 102)
known useful:

GPIO14
	AF0 - TXD0
	AF5 - TXD1
GPIO15
	AF0 - RXD0
	AF5 - RXD1
