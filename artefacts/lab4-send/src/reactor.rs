use core::alloc::Layout;
use core::any::Any;
use core::arch::asm;
use bcm2835_lpa::Peripherals;
use lab4_common::{muart, send_blocking, sendln_blocking};
use lab4_common::reactor::io_theseus::IrDriver;
use lab4_common::reactor::{Indicators, Io, IoTimeouts, Logger, ProtocolEnum, Reactor};
use lab4_common::reactor::log_uart1_raw::RawUart1Logger;
use lab4_common::reactor::protocol_relay::{Program, RelayProtocol};
use lab4_common::reactor::protocol_theseus::BootProtocol;
use lab4_common::relocation::Relocation;
use muart::__flush_tx;
use theseus_common::theseus::v1;
use crate::reactor::blinken::Blinken;
use crate::stub::{_relocation_stub, _relocation_stub_end};

// pub mod handshake;
// mod v1;
pub mod blinken;

struct Blink2;

impl Indicators for Blink2 {
    fn io_did_write(&self, rz: &Reactor, wrote: bool) {
        // 27
        Blinken._27(&rz.peri.GPIO, wrote)
    }

    fn io_is_receiving(&self, rz: &Reactor, receiving: bool) {
        // 47
        Blinken._47(&rz.peri.GPIO, receiving)
    }

    fn io_input_overrun(&self, rz: &Reactor, overrun: bool) {
        todo!()
    }
}

pub fn run() {
    let peri = unsafe { Peripherals::steal() };
    Blinken::init(&peri.GPIO);
    // 115200
    muart::uart1_init(&peri.GPIO, &peri.AUX, &peri.UART1, 270);

    let env = lab4_common::reactor::Env {
        __unsafe_program_end__: unsafe {
            core::ptr::addr_of!(crate::stub::__theseus_prog_end__)
                as *mut u8
        },
        __unsafe_memory_end__: (512 * 1024 * 1024) as *mut u8,
    };
    let mut reactor = Reactor::new(peri, env)
        .expect("failed to allocate buffers for Reactor");

    let mut protocol = RelayProtocol::new(&mut reactor, Program::new(
        0x8000, &PROGRAM
    ));
    let mut logger = RawUart1Logger;
    let mut io = IrDriver::new(
        &mut reactor,
        /* ibuf */Layout::from_size_align(0x10000, 4).unwrap(),
        /* obuf */Layout::from_size_align(0x10000, 4).unwrap(),
        /* timeouts */RelayProtocol::default_driver_timeouts(),
    ).expect("failed to allocate buffers for IR driver");

    let indicators = Blink2;

    send_blocking!("Enabling caches... ");

    {
        let p = unsafe{ Peripherals::steal() };
        muart::__flush_tx(&p.UART1);
    }

    // enable caches
    unsafe {
        asm!(
            "mov {t}, #0",
            "mrc p15, 0, {t}, c1, c0, 0",
            "orr {t}, {t}, {mask}",
            "mcr p15, 0, {t}, c1, c0, 0",
            t = out(reg) _,
            mask = in(reg) 0b1100000000100
        );
    }

    sendln_blocking!("done");

    reactor.run(
        &mut logger, &mut io, &indicators, ProtocolEnum::RelayProtocol(protocol),
    );
}

static PROGRAM : [u8; 256] = [
0x00, 0x00, 0x0f, 0xe1, 0x1f, 0x00, 0xc0, 0xe3, 0x13, 0x00, 0x80, 0xe3,
0x80, 0x00, 0x80, 0xe3, 0x00, 0xf0, 0x29, 0xe1, 0x00, 0x10, 0xa0, 0xe3,
0x95, 0x1f, 0x07, 0xee, 0xd8, 0xa0, 0x9f, 0xe5, 0x08, 0x50, 0x9a, 0xe5,
0x07, 0x70, 0xa0, 0xe3, 0x87, 0x7a, 0xe0, 0xe1, 0x07, 0x50, 0x05, 0xe0,
0x01, 0x70, 0xa0, 0xe3, 0x87, 0x5a, 0x85, 0xe1, 0x08, 0x50, 0x8a, 0xe5,
0x10, 0x50, 0x9a, 0xe5, 0x07, 0x70, 0xa0, 0xe3, 0x87, 0x7a, 0xe0, 0xe1,
0x07, 0x50, 0x05, 0xe0, 0x01, 0x70, 0xa0, 0xe3, 0x87, 0x5a, 0x85, 0xe1,
0x10, 0x50, 0x8a, 0xe5, 0x21, 0x00, 0x00, 0xeb, 0x00, 0x10, 0xa0, 0xe1,
0x01, 0x20, 0xa0, 0xe3, 0x1e, 0x00, 0x00, 0xeb, 0x20, 0x00, 0x00, 0xeb,
0x01, 0x06, 0x50, 0xe3, 0x00, 0x00, 0x00, 0xaa, 0xfa, 0xff, 0xff, 0xea,
0x01, 0x00, 0x52, 0xe3, 0x02, 0x00, 0x00, 0x0a, 0x0b, 0x00, 0x00, 0xeb,
0x01, 0x20, 0xa0, 0xe3, 0x01, 0x00, 0x00, 0xea, 0x04, 0x00, 0x00, 0xeb,
0x00, 0x20, 0xa0, 0xe3, 0x12, 0x00, 0x00, 0xeb, 0x00, 0x10, 0xa0, 0xe1,
0x08, 0x00, 0x00, 0xeb, 0xef, 0xff, 0xff, 0xea, 0x01, 0x70, 0xa0, 0xe3,
0x87, 0x7d, 0xa0, 0xe1, 0x1c, 0x70, 0x8a, 0xe5, 0x1e, 0xff, 0x2f, 0xe1,
0x01, 0x70, 0xa0, 0xe3, 0x87, 0x7d, 0xa0, 0xe1, 0x28, 0x70, 0x8a, 0xe5,
0x1e, 0xff, 0x2f, 0xe1, 0x01, 0x70, 0xa0, 0xe3, 0x87, 0x77, 0xa0, 0xe1,
0x2c, 0x70, 0x8a, 0xe5, 0x1e, 0xff, 0x2f, 0xe1, 0x01, 0x70, 0xa0, 0xe3,
0x87, 0x77, 0xa0, 0xe1, 0x20, 0x70, 0x8a, 0xe5, 0x1e, 0xff, 0x2f, 0xe1,
0x0c, 0x90, 0x9f, 0xe5, 0x04, 0x00, 0x99, 0xe5, 0x1e, 0xff, 0x2f, 0xe1,
0x01, 0x00, 0x40, 0xe0, 0x1e, 0xff, 0x2f, 0xe1, 0x00, 0x30, 0x00, 0x20,
0x00, 0x00, 0x20, 0x20
];
